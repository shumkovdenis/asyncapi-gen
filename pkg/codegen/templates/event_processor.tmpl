{{ define "event_processor" -}}

type Handler interface {
	{{- range $opKey, $op := $.EventProcessorOperations }}
	{{- $msg := index $op.Messages 0 }}
	{{- $schema := index $.AvroSchemas $msg.Follow.Reference }}
	{{- $msgName := pascal $schema.Name }}
	{{ pascal $opKey }}(ctx context.Context, msg *{{ $msgName }}) error
	{{- end }}
}

func NewRouter(
	brokers []string, registryClient *registry.Client, handler Handler,
) (*message.Router, error) {
	logger := watermill.NewStdLogger(false, false)

	router, err := message.NewRouter(message.RouterConfig{}, logger)
	if err != nil {
		return nil, err
	}

	router.AddPlugin(plugin.SignalsHandler)

	eventProcessorConfig := cqrs.EventGroupProcessorConfig{
		GenerateSubscribeTopic: func(
			params cqrs.EventGroupProcessorGenerateSubscribeTopicParams,
		) (string, error) {
			return params.EventGroupName, nil
		},
		SubscriberConstructor: func(
			_ cqrs.EventGroupProcessorSubscriberConstructorParams,
		) (message.Subscriber, error) {
			config := kafka.SubscriberConfig{
				Brokers:     brokers,
				Unmarshaler: kafka.DefaultMarshaler{},
			}

			return kafka.NewSubscriber(config, logger)
		},
		Marshaler: &avroMarshaler{
			schemaProvider: &schemaProvider{
				RegistryClient: registryClient,
			},
		},
		Logger: logger,
	}

	eventProcessor, err := cqrs.NewEventGroupProcessorWithConfig(
		router, eventProcessorConfig,
	)
	if err != nil {
		return nil, err
	}

	{{- range $chKey, $ch := $.Channels }}
	err = eventProcessor.AddHandlersGroup("{{ $ch.Address }}",
		{{- range $opKey, $op := $.EventProcessorOperations }}
		{{- $chRef :=  printf "#/channels/%s" $chKey }}
		{{- if eq $chRef $op.Channel.Reference }}
		{{- $msg := index $op.Messages 0 }}
		{{- $schema := index $.AvroSchemas $msg.Follow.Reference }}
		{{- $msgName := pascal $schema.Name }}
		cqrs.NewGroupEventHandler(
			func(ctx context.Context, msg *{{ $msgName }}) error {
				return handler.{{ pascal $opKey }}(ctx, msg)
			},
		),
		{{- end }}
		{{- end }}
	)
	if err != nil {
		return nil, err
	}

	{{- end }}

	return router, nil
}

{{- end }}
