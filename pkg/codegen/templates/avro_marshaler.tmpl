{{ define "avro_marshaler" -}}

type avroMarshaler struct {
	schemaProvider *schemaProvider
}

func (m *avroMarshaler) Marshal(val any) (*message.Message, error) {
	schemaInfo, err := m.schemaProvider.GetSchemaInfo(val)
	if err != nil {
		return nil, err
	}

	payload, err := avro.Marshal(schemaInfo.Schema, val)
	if err != nil {
		return nil, err
	}

	b, err := wireMessage(schemaInfo.ID, payload)
	if err != nil {
		return nil, err
	}

	msg := message.NewMessage(
		watermill.NewUUID(),
		b,
	)

	return msg, nil
}

func (m *avroMarshaler) Unmarshal(msg *message.Message, val any) (err error) {
	schemaID, err := extractSchemaID(msg.Payload)
	if err != nil {
		return err
	}

	schema, err := m.schemaProvider.GetSchema(schemaID)
	if err != nil {
		return err
	}

	payload, err := extractPayload(msg.Payload)
	if err != nil {
		return err
	}

	return avro.Unmarshal(schema, payload, val)
}

func (m *avroMarshaler) Name(cmdOrEvent any) string {
	return m.schemaProvider.GenerateName(cmdOrEvent)
}

func (m *avroMarshaler) NameFromMessage(msg *message.Message) string {
	schemaID, err := extractSchemaID(msg.Payload)
	if err != nil {
		return "invalid"
	}

	name, err := m.schemaProvider.GetName(schemaID)
	if err != nil {
		return "unknown"
	}

	return name
}

const (
	magicByte byte = 0x0

	wireSize = 5
	idSize   = 4
)

func wireMessage(id uint32, payload []byte) ([]byte, error) {
	var buf bytes.Buffer

	err := buf.WriteByte(magicByte)
	if err != nil {
		return nil, err
	}

	idBytes := make([]byte, idSize)
	binary.BigEndian.PutUint32(idBytes, id)

	_, err = buf.Write(idBytes)
	if err != nil {
		return nil, err
	}

	_, err = buf.Write(payload)
	if err != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

func extractSchemaID(data []byte) (uint32, error) {
	err := checkWireFormat(data)
	if err != nil {
		return 0, err
	}

	return binary.BigEndian.Uint32(data[1:5]), nil
}

func extractPayload(data []byte) ([]byte, error) {
	err := checkWireFormat(data)
	if err != nil {
		return nil, err
	}

	return data[wireSize:], nil
}

func checkWireFormat(data []byte) error {
	if len(data) < wireSize {
		return errors.New("data too short")
	}

	if data[0] != magicByte {
		return fmt.Errorf("invalid magic byte: %x", data[0])
	}

	return nil
}

{{- end }}
