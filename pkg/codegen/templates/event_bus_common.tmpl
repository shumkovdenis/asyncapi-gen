{{ define "event_bus_common" -}}

type EventBus struct {
	eventBus *cqrs.EventBus
}

func NewEventBus(
	brokers []string, registryClient *registry.Client,
) (*EventBus, error) {
	logger := watermill.NewStdLogger(false, false)

	sp := &schemaProvider{
		RegistryClient: registryClient,
	}

	err := sp.RegisterSchemes()
	if err != nil {
		return nil, err
	}

	publisher, err := kafka.NewPublisher(
		kafka.PublisherConfig{
			Brokers:   brokers,
			Marshaler: kafka.DefaultMarshaler{},
		},
		logger,
	)
	if err != nil {
		return nil, err
	}

	eventBusConfig := cqrs.EventBusConfig{
		GeneratePublishTopic: generatePublishTopic,
		Marshaler: &avroMarshaler{
			schemaProvider: sp,
		},
		Logger: logger,
	}

	eventBus, err := cqrs.NewEventBusWithConfig(publisher, eventBusConfig)
	if err != nil {
		return nil, err
	}

	return &EventBus{eventBus: eventBus}, err
}

{{- end }}
